# -*- coding: utf-8 -*-
"""파이썬 기본공부5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bhzfjeJinHiDOVIO4Cgdd9-J_nFXM313
"""

# 문제 - 사용자에게 문장 1개를 입력받아서, 출력해주세요.

print("문장을 입력해주세요 : ",end = '')

line = input()
line = int(line)
#input은 기본적으로 문자열로 저장된다
#그러므로 타입에 맞게 형변환을 해주어야 한다
print(line + 123)

#사용자에게 문장 1개를 입력받아서, ,를 기준으로 나눠주세요.
print("문장을 입력해주세요 : ",end = '')

line = input()
print(line)

line = line.split(',')
#split을 사용하면 객체화가 된다
#,를(을) 기준으로 데이터의 개수 증가한다
#line = line.split('')은(는) 띄어쓰기 기준으로 하나씩 나뉜다
print(line)

#사용자에게 문장 1개를 입력받아서, strip 한 결과를, 다시 ,를 기준으로 나눠주세요.
print("문장을 입력해주세요 : ",end = '')

line = input()
#line = line.strip()
#line = line.split(',')
line = input().strip().split()
#맨앞과 맨뒤의 여백만을 없에 준다

print(line)

#사용자에게 숫자 2개를 입력받아서, 더한 결과를 출력해주세요.
print("문장을 입력해주세요 : ",end = '')

number = input().strip().split()
number[0] = int(number[0])
number[1] = int(number[1]) 

print(number[0]+number[1])

#사용자에게 숫자 3개를 입력받아서, 더한 결과를 출력해주세요. map, strip를 사용해주세요.
number = input().strip().split()
number[0] = int(number[0])
number[1] = int(number[1])
number[2] = int(number[2]) 
number[3] = int(number[3]) 

print(number[0]+number[1]+number[2]+number[3])

b = [3.14,1.4,93,85,4]
print(b)

b = list(map(int,b))
#map은 소숫점을 없애주는 기능을하며 일대일 매칭을 한다고 보면된다
#map은 인덱스라는 개념이 없소 키와 값으로 나뉘어져있다
print(b)

#for문의 개념
print("== while, 0부터 9까지 ==")
i = 0
while i < 10:
  print(i)
  i += 1

print("== for, 0부터 9까지 ==")
for i in range(10):
  print(i)

print("== for, 1부터 9까지 ==")
for i in range(1, 10):
  print(i)

print("== for, 2부터 10까지, 2씩 증가 ==")
for i in range(2, 11, 2):
  print(i)

print("== for, 10부터 1까지 ==")
for i in range(10, 0, -1):
  print(i)

print("== for, 10부터 2까지, 2씩 감소 ==")
for i in range(10, 0, -2):
  print(i)

print("== 리스트 a 세팅 ==")
a = [10, 20, 30, 40]

print("== for, 리스트의 모든 요소 출력 ==")
for v in a:
  print(v)

print("== for, 리스트의 모든 요소의 번호 출력 ==")
for i in range(len(a)):
  print(i)

print("== for, 리스트의 모든 요소의 번호와 값 출력 ==")
for i in range(len(a)):
  print("a[{}] : {}".format(i, a[i]))

print("== for, 리스트의 모든 요소의 번호를 역순으로 출력 ==")
for i in range(len(a) - 1, -1, -1):
  print(i)

print("== for, 리스트의 모든 요소의 번호와 값을 역순으로 출력 ==")
for i in range(len(a) - 1, -1, -1):
  print("a[{}] : {}".format(i, a[i]))

# 문제 : for문으로 1부터 100까지 출력
for i in range(1, 101):
  print(i)

# 문제 : for문으로 100부터 1까지 출력

for i in range(100, 0, -1):
  print(i)

# 문제 : for문으로 1부터 100 사이의 짝수만 출력
#for i in range(2, 101, 2):
  
# print(i)

def is_even(i):
  return i % 2 == 0

for i in range(2, 101):
  if is_even(i):
    print(i)

# 문제 : for문으로 100부터 1사이의 짝수만 출력

#for i in range(100, 0, -2):
#  print(i)
def is_even(i):
  return i % 2 == 0

for i in range(100, 0, -1):
  if is_even(i):
    print(i)

# 문제 : for문으로 구구단 8단 출력
dan = 8
for i in range(1, 10):
  print("{} * {} = {}".format(dan, i, dan * i))

# 문제 : for문으로 구구단 1단 ~ 9단 출력

for dan in range(1, 10):
  print("== {}단 ==".format(dan))
  for i in range(1, 10):
    print("{} * {} = {}".format(dan, i, dan * i))

# 문제 : for문으로 1부터 n사이에 존재하는 소수의 합을 반환하는 함수 구현

# 소수판별함수 구현
def is_prime_number(number):
  if number <= 1:
    return False

  for i in range(2, number):
    if number % i == 0:
      return False
  
  return True

# 1부터 n까지 사이의 모든 소수의 합을 반환하는 함수 구현
def get_1_to_n_prime_sum(n):
  s = 0

  for i in range(1, n + 1):
    if is_prime_number(i):
      s += i

  return s

# 함수 사용
n = 10
print("1부터 {}사이에 존재하는 모든 소수 의 합 : {}".format(n, get_1_to_n_prime_sum(n)))

n = 100
print("1부터 {}사이에 존재하는 모든 소수 의 합 : {}".format(n, get_1_to_n_prime_sum(n)))

n = 1000
print("1부터 {}사이에 존재하는 모든 소수 의 합 : {}".format(n, get_1_to_n_prime_sum(n)))